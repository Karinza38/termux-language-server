{
  "$id": "https://github.com/termux/termux-language-server/blob/main/src/termux_language_server/assets/json/ebuild.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$comment": "Don't edit this file directly! It is generated by `termux-language-server --generate-schema=ebuild`.",
  "type": "object",
  "required": [],
  "properties": {
    "ARCH": {
      "description": "ARCH\nThis variable contains the official Gentoo-specific acronym for the current architecture of the running system. For an authoritative list please review /var/db/repos/gentoo/profiles/arch.list."
    },
    "P": {
      "description": "P\nThis variable contains the package name without the ebuild revision. This variable must NEVER be modified."
    },
    "PN": {
      "description": "PN\nContains the name of the script without the version number."
    },
    "PV": {
      "description": "PV\nContains the version number without the revision."
    },
    "PR": {
      "description": "PR\nContains the revision number or 'r0' if no revision number exists."
    },
    "PVR": {
      "description": "PVR\nContains the version number with the revision (if any)."
    },
    "PF": {
      "description": "PF\nContains the full package name PN-PVR"
    },
    "CATEGORY": {
      "description": "CATEGORY\nContains the package category name."
    },
    "A": {
      "description": "A\nContains all source files required for the package. This variable must not be defined. It is autogenerated from the SRC_URI variable."
    },
    "WORKDIR": {
      "description": "WORKDIR =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/work\"\nContains the path to the package build root. Do not modify this variable."
    },
    "FILESDIR": {
      "description": "FILESDIR =\n\"${PORTAGE_TMPDIR}/${CATEGORY}/${PF}/files\"\nContains the path to the directory in which package-specific auxiliary files are located. Do not modify this variable."
    },
    "EBUILD_PHASE": {
      "description": "EBUILD_PHASE\nContains the abreviated name of the phase function that is currently executing, such as \"setup\", \"unpack\", \"compile\", or \"preinst\"."
    },
    "EBUILD_PHASE_FUNC": {
      "description": "EBUILD_PHASE_FUNC\nBeginning with EAPI 5, contains the full name of the phase function that is currently executing, such as \"pkg_setup\", \"src_unpack\", \"src_compile\", or \"pkg_preinst\"."
    },
    "EPREFIX": {
      "description": "EPREFIX\nBeginning with EAPI 3, contains the offset that this Portage was configured for during installation. The offset is sometimes necessary in an ebuild or eclass, and is available in such cases as ${EPREFIX}. EPREFIX does not contain a trailing slash, therefore an absent offset is represented by the empty string. Do not modify this variable."
    },
    "S": {
      "description": "S = \"${WORKDIR}/${P}\"\nContains the path to the temporary build directory. This variable is used by the functions src_compile and src_install. Both are executed with S as the current directory. This variable may be modified to match the extraction directory of a tarball for the package."
    },
    "T": {
      "description": "T =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/temp\"\nContains the path to a temporary directory. You may use this for whatever you like."
    },
    "D": {
      "description": "D =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/image/\"\nContains the path to the temporary install directory. Every write operation that does not involve the helper tools and functions (found below) should be prefixed with ${D}. Beginning with EAPI 3, the offset prefix often needs to be taken into account here, for which the variable ${ED} is provided (see below). Note that with EAPI 7, any trailing slash contained in this path will be automatically removed for ease of concatenating paths within ebuilds. Do not modify this variable."
    },
    "ED": {
      "description": "ED =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/image/${EPREFIX}/\"\nBeginning with EAPI 3, contains the path \"${D%/}${EPREFIX}/\" for convenience purposes. For EAPI values prior to EAPI 3 which do not support ED, helpers use D where they would otherwise use ED. Note that with EAPI 7, any trailing slash contained in this path will be automatically removed for ease of concatenating paths within ebuilds. Do not modify this variable."
    },
    "MERGE_TYPE": {
      "description": "MERGE_TYPE\nBeginning with EAPI 4, the MERGE_TYPE variable can be used to query the current merge type. This variable will contain one of the following possible values:    Value Meaning   binary previously-built which is scheduled for merge   buildonly source-build which is not scheduled for merge   source source-build which is scheduled for merge"
    },
    "PROVIDES_EXCLUDE": {
      "description": "PROVIDES_EXCLUDE = [space delimited list of fnmatch\npatterns]\nSonames and file paths matched by these fnmatch patterns will be excluded during genertion of PROVIDES metadata (see portage(5)). Patterns are delimited by whitespace, and it is possible to create patterns containing quoted whitespace."
    },
    "PORTAGE_LOG_FILE": {
      "description": "PORTAGE_LOG_FILE\nContains the path of the build log. If PORTAGE_LOGDIR variable is unset then PORTAGE_LOG_FILE=\"${T}/build.log\"."
    },
    "PORTAGE_SOCKS5_PROXY": {
      "description": "PORTAGE_SOCKS5_PROXY\nContains the UNIX socket path to SOCKSv5 proxy providing host network access. Available only when running inside network-sandbox and a proxy is available (see network-sandbox in make.conf(5))."
    },
    "REPLACED_BY_VERSION": {
      "description": "REPLACED_BY_VERSION\nBeginning with EAPI 4, the REPLACED_BY_VERSION variable can be used in pkg_prerm and pkg_postrm to query the package version that is replacing the current package. If there is no replacement package, the variable will be empty, otherwise it will contain a single version number."
    },
    "REPLACING_VERSIONS": {
      "description": "REPLACING_VERSIONS\nBeginning with EAPI 4, the REPLACING_VERSIONS variable can be used in pkg_pretend, pkg_setup, pkg_preinst and pkg_postinst to query the package version(s) that the current package is replacing. If there are no packages to replace, the variable will be empty, otherwise it will contain a space-separated list of version numbers corresponding to the package version(s) being replaced. Typically, this variable will not contain more than one version, but according to PMS it can contain more."
    },
    "REQUIRES_EXCLUDE": {
      "description": "REQUIRES_EXCLUDE = [space delimited list of fnmatch\npatterns]\nSonames and file paths matched by these fnmatch patterns will be excluded during generation of REQUIRES metadata (see portage(5)). Patterns are delimited by whitespace, and it is possible to create patterns containing quoted whitespace."
    },
    "ROOT": {
      "description": "ROOT = \"/\"\nPlease note an important recent change regarding the ROOT variable -- in EAPI 7 ebuilds, this variable will default to \"\" rather than the traditional \"/\" within ebuilds when pointing to the root filesystem, and when set to a non-root path this variable will never contain a trailing slash. This has the added convenience of eliminating the need to specify \"${ROOT%/}\" when concatenating paths, making the use of ROOT more elegant. This applies to the variables EROOT, D and ED as well. Please make note that this will mean that ebuilds must use different logic in conditionals to determine if they are installing to the root filesystem -- use [[ \"$ROOT\" == \"\" ]] instead of [[ \"$ROOT\" == \"/\" ]]."
    },
    "EROOT": {
      "description": "EROOT = \"${ROOT%/}${EPREFIX}/\"\nBeginning with EAPI 3, contains \"${ROOT%/}${EPREFIX}/\" for convenience purposes. Do not modify this variable. Also see the important note regarding ROOT with EAPI 7, above. As with ROOT, EROOT will be defined as \"\" when set to the root filesystem and never have a trailing slash within an ebuild."
    },
    "BROOT": {
      "description": "BROOT = \"${EPREFIX}\"\nBeginning with EAPI 7, the absolute path to the root directory containing build dependencies satisfied by BDEPEND, typically executable build tools. This includes any applicable offset prefix. Do not modify this variable."
    },
    "DESCRIPTION": {
      "description": "DESCRIPTION = \"A happy little\npackage\"\nShould contain a short description of the package."
    },
    "EAPI": {
      "description": "EAPI = \"0\"\nDefines the ebuild API version to which this package conforms. If not defined then it defaults to \"0\". If portage does not recognize the EAPI value then it will mask the package and refuse to perform any operations with it since this means that a newer version of portage needs to be installed first. For maximum backward compatiblity, a package should conform to the lowest possible EAPI. Note that anyone who uses the ebuild(1) command with this package will be required to have a version of portage that recognizes the EAPI to which this package conforms."
    },
    "SRC_URI": {
      "description": "SRC_URI =\n\"https://example.com/path/${P}.tar.gz\"\nContains a list of URIs for the required source files. It can contain multiple URIs for a single source file. The list is processed in order if the file was not found on any of the GENTOO_MIRRORS. Beginning with EAPI 2, the output file name of a given URI may be customized with a \"->\" operator on the right hand side, followed by the desired output file name. All tokens, including the operator and output file name, should be separated by whitespace."
    },
    "HOMEPAGE": {
      "description": "HOMEPAGE = \"https://example.com/\"\nShould contain a list of URIs for the sources main sites and other further package dependent information."
    },
    "KEYWORDS": {
      "description": "KEYWORDS =\n[-~][x86,ppc,sparc,mips,alpha,arm,hppa,...]\n"
    },
    "SLOT": {
      "description": "SLOT\nThis sets the SLOT for packages that may need to have multiple versions co-exist. By default you should set SLOT=\"0\". If you are unsure, then do not fiddle with this until you seek some guidance from some guru. This value should NEVER be left undefined."
    },
    "LICENSE": {
      "description": "LICENSE\nThis should be a space delimited list of licenses that the package falls under. This _must_ be set to a matching license in /var/db/repos/gentoo/licenses/. If the license does not exist in the repository yet, you must add it first."
    },
    "IUSE": {
      "description": "IUSE\nThis should be a list of any and all USE flags that are leveraged within your build script. The only USE flags that should not be listed here are arch related flags (see KEYWORDS). Beginning with EAPI 1, it is possible to prefix flags with + or - in order to create default settings that respectively enable or disable the corresponding USE flags. For details about USE flag stacking order, refer to the USE_ORDER variable in make.conf(5). Given the default USE_ORDER setting, negative IUSE default settings are effective only for negation of repo-level USE settings, since profile and user configuration settings override them."
    },
    "DEPEND": {
      "description": "DEPEND\nThis should contain a list of all packages that are required for the program to compile (aka buildtime dependencies). These are usually libraries and headers."
    },
    "RDEPEND": {
      "description": "RDEPEND\nThis should contain a list of all packages that are required for this program to run (aka runtime dependencies). These are usually libraries."
    },
    "BDEPEND": {
      "description": "BDEPEND\nThis should contain a list of all packages that are required to be executable during compilation of this program (aka native build dependencies). These are usually tools, like interpreters or (cross-)compilers. They will be installed into the system performing the build."
    },
    "IDEPEND": {
      "description": "IDEPEND\nThis should contain a list of all packages that are required to be executable during merging of this package (aka native install-time dependencies). These are usually post-install tooling, like cache generators. They will be installed into the system performing the merge."
    },
    "PDEPEND": {
      "description": "PDEPEND\nThis should contain a list of all packages that should be merged after this one (aka post merge dependencies), but which may be installed by the package manager at any time, if that is not possible."
    },
    "REQUIRED_USE": {
      "description": "REQUIRED_USE\nBeginning with EAPI 4, the REQUIRED_USE variable can be used to specify combinations of USE flags that are allowed or not allowed. Elements can be nested when necessary."
    },
    "RESTRICT": {
      "description": "RESTRICT\nThis should be a space delimited list of portage features to restrict. You may use conditional syntax to vary restrictions as seen above in DEPEND."
    },
    "PROPERTIES": {
      "description": "PROPERTIES\nA space delimited list of properties, with conditional syntax support."
    },
    "DOCS": {
      "description": "DOCS\nBeginning with EAPI 4, an array or space-delimited list of documentation files for the default src_install function to install using dodoc. If undefined, a reasonable default list is used. See the documentation for src_install below."
    },
    "PATCHES": {
      "description": "PATCHES\nBeginning with EAPI 6, an array of patches for applying in the default src_prepare function using eapply."
    },
    "Usage": {
      "description": "Usage Notes\nSeveral QA variables are provided which allow an ebuild to manipulate some of the QA checks performed by portage. Use of these variables in ebuilds should be kept to an absolute minimum otherwise they defeat the purpose of the QA checks, and their use is subject to agreement of the QA team. They are primarily intended for use by ebuilds that install closed-source binary objects that cannot be altered."
    },
    "QA_AM_MAINTAINER_MODE": {
      "description": "QA_AM_MAINTAINER_MODE\nThis should contain a list of lines containing automake missing --run commands. The lines may contain regular expressions with escape-quoted special characters."
    },
    "QA_CONFIG_IMPL_DECL_SKIP": {
      "description": "QA_CONFIG_IMPL_DECL_SKIP\nThis should contain a list of function names to ignore when checking for -Wimplicit-function-declaration in configure logs. This should only be used for false positives."
    },
    "QA_CONFIGURE_OPTIONS": {
      "description": "QA_CONFIGURE_OPTIONS\nThis should contain a list of configure options which trigger warnings about unrecognized options. The options may contain regular expressions with escape-quoted special characters."
    },
    "QA_DESKTOP_FILE": {
      "description": "QA_DESKTOP_FILE\nThis should contain a list of file paths, relative to the image directory, of desktop files which should not be validated. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_DT_NEEDED": {
      "description": "QA_DT_NEEDED\nThis should contain a list of file paths, relative to the image directory, of shared libraries that lack NEEDED entries. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_EXECSTACK": {
      "description": "QA_EXECSTACK\nThis should contain a list of file paths, relative to the image directory, of objects that require executable stack in order to run. The paths may contain fnmatch patterns."
    },
    "QA_FLAGS_IGNORED": {
      "description": "QA_FLAGS_IGNORED\nThis should contain a list of file paths, relative to the image directory, of files that do not contain .GCC.command.line sections or contain .hash sections. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_MULTILIB_PATHS": {
      "description": "QA_MULTILIB_PATHS\nThis should contain a list of file paths, relative to the image directory, of files that should be ignored for the multilib-strict checks. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_PKGCONFIG_VERSION": {
      "description": "QA_PKGCONFIG_VERSION\nIf set, then portage verifies that all pkg-config .pc files have a Version field with the value of QA_PKGCONFIG_VERSION. For example, set QA_PKGCONFIG_VERSION=${PV} if your package is expected to install all pkg-config .pc files with a Version field containing PV."
    },
    "QA_PREBUILT": {
      "description": "QA_PREBUILT\nThis should contain a list of file paths, relative to the image directory, of files that are pre-built binaries. Paths listed here will be appended to each of the QA_* variables listed below. The paths may contain fnmatch-like patterns which will be internally translated to regular expressions for the QA_* variables that support regular expressions instead of fnmatch patterns. The translation mechanism simply replaces \"*\" with \".*\"."
    },
    "QA_PRESTRIPPED": {
      "description": "QA_PRESTRIPPED\nThis should contain a list of file paths, relative to the image directory, of files that contain pre-stripped binaries. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_SONAME": {
      "description": "QA_SONAME\nThis should contain a list of file paths, relative to the image directory, of shared libraries that lack SONAMEs. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_SONAME_NO_SYMLINK": {
      "description": "QA_SONAME_NO_SYMLINK\nThis should contain a list of file paths, relative to the image directory, of shared libraries that have SONAMEs but should not have a corresponding SONAME symlink in the same directory. The paths may contain regular expressions with escape-quoted special characters."
    },
    "QA_TEXTRELS": {
      "description": "QA_TEXTRELS\nThis variable can be set to a list of file paths, relative to the image directory, of files that contain text relocations that cannot be eliminated. The paths may contain fnmatch patterns."
    },
    "QA_WX_LOAD": {
      "description": "QA_WX_LOAD\nThis should contain a list of file paths, relative to the image directory, of files that contain writable and executable segments. These are rare. The paths may contain fnmatch patterns."
    },
    "inherit": {
      "description": "inherit\nInherit is portage's maintenance of extra classes of functions that are external to ebuilds and provided as inheritable capabilities and data. They define functions and set data types as drop-in replacements, expanded, and simplified routines for extremely common tasks to streamline the build process. Call to inherit cannot depend on conditions which can vary in given ebuild. Specification of the eclasses contains only their name and not the .eclass extension. Also note that the inherit statement must come before other variable declarations unless these variables are used in global scope of eclasses."
    },
    "pkg_pretend": {
      "description": "pkg_pretend\nBeginning with EAPI 4, this function can be defined in order to check that miscellaneous requirements are met. It is called as early as possible, before any attempt is made to satisfy dependencies. If the function detects a problem then it should call eerror and die. The environment (variables, functions, temporary directories, etc..) that is used to execute pkg_pretend is not saved and therefore is not available in phases that execute afterwards."
    },
    "pkg_nofetch": {
      "description": "pkg_nofetch\nThis function will be executed when the files in SRC_URI cannot be fetched for any reason. If you turn on fetch in RESTRICT, this is useful for displaying information to the user on *how* to obtain said files. All you have to do is output a message and let the function return. Do not end the function with a call to die."
    },
    "pkg_setup": {
      "description": "pkg_setup\nThis function can be used if the package needs specific setup actions or checks to be preformed before anything else. Initial working directory: $PORTAGE_TMPDIR"
    },
    "src_unpack": {
      "description": "src_unpack\nThis function is used to unpack all the sources in A to WORKDIR. If not defined in the ebuild script it calls unpack ${A}. Any patches and other pre configure/compile modifications should be done here. Initial working directory: $WORKDIR"
    },
    "src_prepare": {
      "description": "src_prepare\nAll preparation of source code, such as application of patches, should be done here. This function is supported beginning with EAPI 2. Initial working directory: $S"
    },
    "src_configure": {
      "description": "src_configure\nAll necessary steps for configuration should be done here. This function is supported beginning with EAPI 2. Initial working directory: $S"
    },
    "src_compile": {
      "description": "src_compile\nWith less than EAPI 2, all necessary steps for both configuration and compilation should be done here. Beginning with EAPI 2, only compilation steps should be done here. Initial working directory: $S"
    },
    "src_test": {
      "description": "src_test\nRun all package specific test cases. The default is to run 'emake check' followed 'emake test'. Prior to EAPI 5, the default src_test implementation will automatically pass the -j1 option as the last argument to emake, and beginning with EAPI 5 it will allow the tests to run in parallel. Initial working directory: $S"
    },
    "src_install": {
      "description": "src_install\nShould contain everything required to install the package in the temporary install directory. Initial working directory: $S"
    },
    "pkg_preinst": {
      "description": "pkg_preinst pkg_postinst\nAll modifications required on the live-filesystem before and after the package is merged should be placed here. Also commentary for the user should be listed here as it will be displayed last. Initial working directory: $PWD"
    },
    "pkg_prerm": {
      "description": "pkg_prerm pkg_postrm\nLike the pkg_*inst functions but for unmerge. Initial working directory: $PWD"
    },
    "pkg_config": {
      "description": "pkg_config\nThis function should contain optional basic configuration steps. Initial working directory: $PWD"
    },
    "default": {
      "description": "default\nCalls the default phase function implementation for the currently executing phase. This function is supported beginning with EAPI 2."
    },
    "default_*": {
      "description": "default_*\nBeginning with EAPI 2, the default pkg_nofetch and src_* phase functions are accessible via a function having a name that begins with default_ and ends with the respective phase function name. For example, a call to a function with the name default_src_compile is equivalent to a call to the default src_compile implementation.    Default Phase Functions     default_src_unpack   default_src_prepare   default_src_configure   default_src_compile   default_src_test"
    },
    "assert": {
      "description": "assert [reason]\nChecks the value of the shell's PIPESTATUS array variable, and if any component is non-zero (indicating failure), calls die with reason as a failure message."
    },
    "die": {
      "description": "die [reason]\nCauses the current emerge process to be aborted. The final display will include reason."
    },
    "nonfatal": {
      "description": "nonfatal <helper>\nExecute helper and do not call die if it fails. The nonfatal helper is available beginning with EAPI 4."
    },
    "use": {
      "description": "use <USE item>\nIf USE item is in the USE variable, the function will silently return 0 (aka shell true). If USE item is not in the USE variable, the function will silently return 1 (aka shell false). usev is a verbose version of use.  Example:    if use gnome ; then \tguiconf=\"--enable-gui=gnome --with-x\" elif use gtk ; then \tguiconf=\"--enable-gui=gtk --with-x\" elif use X ; then \tguiconf=\"--enable-gui=athena --with-x\" else \t# No gui version will be built \tguiconf=\"\" fi"
    },
    "usev": {
      "description": "usev <USE item>\nLike use, but also echoes USE item when use returns true."
    },
    "usex": {
      "description": "usex <USE flag> [true output]\n[false output] [true suffix] [false\nsuffix]\nIf USE flag is set, echo [true output][true suffix] (defaults to \"yes\"), otherwise echo [false output][false suffix] (defaults to \"no\"). The usex helper is available beginning with EAPI 5."
    },
    "use_with": {
      "description": "use_with <USE item> [configure name]\n[configure opt]\nUseful for creating custom options to pass to a configure script. If USE item is in the USE variable and a configure opt is specified, then the string --with-[configure name]=[configure opt] will be echoed. If configure opt is not specified, then just --with-[configure name] will be echoed. If USE item is not in the USE variable, then the string --without-[configure name] will be echoed. If configure name is not specified, then USE item will be used in its place. Beginning with EAPI 4, an empty configure opt argument is recognized. In EAPI 3 and earlier, an empty configure opt argument is treated as if it weren't provided.  Examples:    USE=\"opengl\" myconf=$(use_with opengl) (myconf now has the value \"--with-opengl\")  USE=\"jpeg\" myconf=$(use_with jpeg libjpeg) (myconf now has the value \"--with-libjpeg\")  USE=\"\" myconf=$(use_with jpeg libjpeg) (myconf now has the value \"--without-libjpeg\")  USE=\"sdl\" myconf=$(use_with sdl SDL all-plugins) (myconf now has the value \"--with-SDL=all-plugins\")"
    },
    "use_enable": {
      "description": "use_enable <USE item> [configure\nname] [configure opt]\nSame as use_with above, except that the configure options are --enable- instead of --with- and --disable- instead of --without-. Beginning with EAPI 4, an empty configure opt argument is recognized. In EAPI 3 and earlier, an empty configure opt argument is treated as if it weren't provided."
    },
    "has": {
      "description": "has <item> <item\nlist>\nIf item is in item list, then has returns 0. Otherwise, 1 is returned. There is another version, hasv, that will conditionally echo item. The item list is delimited by the IFS variable. This variable has a default value of ' ', or a space. It is a bash(1) setting."
    },
    "hasv": {
      "description": "hasv <item> <item\nlist>\nLike has, but also echoes item when has returns true. Banned in EAPI 8."
    },
    "has_version": {
      "description": "has_version [-b] [-d] [-r]\n[--host-root]\n<category/package-version>\nCheck to see if category/package-version is installed. The parameter accepts all values that are acceptable in the DEPEND variable. The function returns 0 if category/package-version is installed, 1 otherwise. The package is searched for in ROOT by default."
    },
    "best_version": {
      "description": "best_version [-b] [-d] [-r]\n[--host-root] <package name>\nThis function will look up package name in the database of currently installed packages and echo the \"best version\" of the package that is found or nothing if no version is installed. The package is searched for in ROOT by default. It accepts the same options as has_version."
    },
    "einfo": {
      "description": "einfo \"disposable message\"\nSame as elog, but should be used when the message isn't important to the user (like progress or status messages during the build process)."
    },
    "elog": {
      "description": "elog \"informative message\"\nIf you need to display a message that you wish the user to read and take notice of, then use elog. It works just like echo(1), but adds a little more to the output so as to catch the user's eye. The message will also be logged by portage for later review."
    },
    "ewarn": {
      "description": "ewarn \"warning message\"\nSame as einfo, but should be used when showing a warning to the user."
    },
    "eqawarn": {
      "description": "eqawarn \"QA warning message\"\nSame as einfo, but should be used when showing a QA warning to the user."
    },
    "eerror": {
      "description": "eerror \"error message\"\nSame as einfo, but should be used when showing an error to the user."
    },
    "ebegin": {
      "description": "ebegin \"helpful message\"\nLike einfo, we output a helpful message and then hint that the following operation may take some time to complete. Once the task is finished, you need to call eend."
    },
    "eend": {
      "description": "eend <status> [\"error\nmessage\"]\nFollowup the ebegin message with an appropriate \"OK\" or \"!!\" (for errors) marker. If status is non-zero, then the additional error message is displayed."
    },
    "unpack": {
      "description": "unpack <source> [list of more\nsources]\nThis function uncompresses and/or untars a list of sources into the current directory. The function will append source to the DISTDIR variable."
    },
    "eapply": {
      "description": "eapply [patch options]\n<files|directories>\nApplies patches to the ${WORKDIR} with specified options. Default patch level is -p1. If a directory specified, all patches from it with .patch or .diff suffix are applied. This function is available beginning with EAPI 6, replacing old epatch.eclass(5) functions."
    },
    "eapply_user": {
      "description": "eapply_user\nApplies user-provided patches to the ${WORKDIR} from Portage config directory tree. For directory syntax and applying rules, see /etc/portage/patches/ section in portage(5). This function is available beginning with EAPI 6, replacing old epatch.eclass(5) functions."
    },
    "econf": {
      "description": "econf [configure options]\nThis is used as a replacement for configure. Performs:"
    },
    "emake": {
      "description": "emake [make options]\nThis must be used in place of `make` in ebuilds. Performs `${MAKE:-make} ${MAKEOPTS} make options ${EXTRA_EMAKE}`, and calls `die` automatically starting with EAPI 4."
    },
    "einstall": {
      "description": "einstall [make options]\nThis is used as a replacement for make install. Performs:"
    },
    "docompress": {
      "description": "docompress [-x] <path> [list of more\npaths]\nBeginning with EAPI 4, the docompress helper is used to manage lists of files to be included or excluded from optional compression. If the first argument is -x, add each of its subsequent arguments to the exclusion list. Otherwise, add each argument to the inclusion list. The inclusion list initially contains /usr/share/doc, /usr/share/info, and /usr/share/man. The exclusion list initially contains /usr/share/doc/${PF}/html. The optional compression shall be carried out after src_install has completed, and before the execution of any subsequent phase function. For each item in the inclusion list, pretend it has the value of the D variable prepended, then:  If it is a directory, act as if every file or directory immediately under this directory were in the inclusion list. If the item is a file, it may be compressed unless it has been excluded as described below. If the item does not exist, it is ignored.  Whether an item is to be excluded is determined as follows: For each item in the exclusion list, pretend it has the value of the D variable prepended, then:  If it is a directory, act as if every file or directory immediately under this directory were in the exclusion list. If the item is a file, it shall not be compressed. If the item does not exist, it is ignored."
    },
    "dosed": {
      "description": "dosed \"s:orig:change:g\"\n<filename>\nBeginning with EAPI 4, the dosed helper no longer exists. Ebuilds should call sed(1) directly (and assume that it is GNU sed)."
    },
    "dodir": {
      "description": "dodir <path> [more paths]\nCreates directories inside of ${ED}. 'dodir /usr/lib/apache' creates ${ED}/usr/lib/apache. Note that the do* functions will run dodir for you. If this directory will be empty when it is merged, then please use keepdir instead."
    },
    "diropts": {
      "description": "diropts [options for install(1)]\nCan be used to define options for the install function used in dodir. The default is -m0755."
    },
    "into": {
      "description": "into <path>\nSets the root (DESTTREE) for other functions like dobin, dosbin, doman, doinfo, dolib. The default root is /usr."
    },
    "keepdir": {
      "description": "keepdir <path> [more paths]\nSimilar to dodir, but used to create directories that would otherwise be empty. The treatment of completely-empty directories is undefined by PMS, and using keepdir ensures that they are tracked."
    },
    "dobin": {
      "description": "dobin <binary> [list of more\nbinaries]\nInstalls a binary or a list of binaries into DESTTREE/bin. Creates all necessary dirs."
    },
    "dosbin": {
      "description": "dosbin <binary> [list of more\nbinaries]\nInstalls a binary or a list of binaries into DESTTREE/sbin. Creates all necessary dirs."
    },
    "doinitd": {
      "description": "doinitd <init.d script> [list of more init.d\nscripts]\nInstall Gentoo init.d scripts. They will be installed into the correct location for Gentoo init.d scripts (/etc/init.d/). Creates all necessary dirs."
    },
    "doconfd": {
      "description": "doconfd <conf.d file> [list of more conf.d\nfile]\nInstall Gentoo conf.d files. They will be installed into the correct location for Gentoo conf.d files (/etc/conf.d/). Creates all necessary dirs."
    },
    "doenvd": {
      "description": "doenvd <env.d entry> [list of more env.d\nentries]\nInstall Gentoo env.d entries. They will be installed into the correct location for Gentoo env.d entries (/etc/env.d/). Creates all necessary dirs."
    },
    "dolib": {
      "description": "dolib <library> [list of more\nlibraries]\n"
    },
    "dolib.a": {
      "description": "dolib.a <library> [list of more\nlibraries]\n"
    },
    "dolib.so": {
      "description": "dolib.so <library> [list of more\nlibraries]\n"
    },
    "libopts": {
      "description": "libopts [options for install(1)]\nCan be used to define options for the install function used in the dolib functions. The default is -m0644. libopts is banned in EAPI 7."
    },
    "doman": {
      "description": "doman [-i18n=<locale>]\n<man-page> [list of more man-pages]\nInstalls manual-pages into /usr/share/man/man[0-9n] depending on the manual file ending. The files are compressed if they are not already. You can specify locale-specific manpages with the -i18n option. Then the man-page will be installed into /usr/share/man/<locale>/man[0-9n]. Beginning with EAPI 2, a locale-specific manpage which contains a locale in the file name will be installed in /usr/share/man/<locale>/man[0-9n], with the locale portion of the file name removed, and the -i18n option has no effect. For example, with EAPI 2, a manpage named foo.<locale>.1 will be installed as /usr/share/man/<locale>/man1/foo.1. Beginning with EAPI 4, the -i18n option takes precedence over the locale suffix of the file name."
    },
    "dohard": {
      "description": "dohard <filename>\n<linkname>\nBeginning with EAPI 4, the dohard helper no longer exists. Ebuilds should call ln(1) directly."
    },
    "dosym": {
      "description": "dosym [-r] <filename>\n<linkname>\n"
    },
    "doheader": {
      "description": "doheader [-r] <file> [list of more\nfiles]\nInstalls the given header files into /usr/include/, by default with file mode 0644 (this can be overridden with the insopts function). Setting -r sets recursive. The doheader helper is available beginning with EAPI 5."
    },
    "dohtml": {
      "description": "dohtml [-a filetypes] [-r] [-x list-of-dirs-to-ignore]\n[list-of-files-and-dirs]\nInstalls the files in the list of files (space-separated list) into /usr/share/doc/${PF}/html provided the file ends in .htm, .html, .css, .js, .gif, .jpeg, .jpg, or .png. Setting -a limits what types of files will be included, -A appends to the default list, setting -x sets which dirs to exclude (CVS excluded by default), -p sets a document prefix, -r sets recursive. dohtml is banned in EAPI 7: use dodoc and docinto instead."
    },
    "doinfo": {
      "description": "doinfo <info-file> [list of more\ninfo-files]\nInstalls info-pages into DESTDIR/info. Files are automatically gzipped. Creates all necessary dirs."
    },
    "domo": {
      "description": "domo <locale-file> [list of more\nlocale-files]\nInstalls locale-files into DESTDIR/usr/share/locale/[LANG] depending on local-file's ending. Creates all necessary dirs."
    },
    "fowners": {
      "description": "fowners [-h|-H|-L|-P|-R] [user][:group]\n<file> [files]\n"
    },
    "fperms": {
      "description": "fperms [-R] <permissions> <file>\n[files]\n"
    },
    "insinto": {
      "description": "insinto [path]\nSets the destination path for the doins function. The default path is /."
    },
    "insopts": {
      "description": "insopts [options for install(1)]\nCan be used to define options for the install function used in doins. The default is -m0644."
    },
    "doins": {
      "description": "doins [-r] <file> [list of more\nfiles]\nInstalls files into the path controlled by insinto. This function uses install(1). Creates all necessary dirs. Setting -r sets recursive. Beginning with EAPI 4, both doins and newins preserve symlinks. In EAPI 3 and earlier, symlinks are dereferenced rather than preserved."
    },
    "exeinto": {
      "description": "exeinto [path]\nSets the destination path for the doexe function. The default path is /."
    },
    "exeopts": {
      "description": "exeopts [options for install(1)]\nCan be used to define options for the install function used in doexe. The default is -m0755."
    },
    "doexe": {
      "description": "doexe <executable> [list of more\nexecutables]\nInstalls executables into the path controlled by exeinto. This function uses install(1). Creates all necessary dirs. Behavior is undefined if exeinto has not yet been called."
    },
    "docinto": {
      "description": "docinto [path]\nSets the subdir used by dodoc and dohtml when installing into the document tree (based in /usr/share/doc/${PF}/). Default is no subdir, or just \"\"."
    },
    "dodoc": {
      "description": "dodoc [-r] <document> [list of more\ndocuments]\nInstalls a document or a list of documents into /usr/share/doc/${PF}/<docinto path>. Documents are marked for compression. Creates all necessary dirs. Beginning with EAPI 4, there is support for recursion, enabled by the new -r option."
    }
  }
}
